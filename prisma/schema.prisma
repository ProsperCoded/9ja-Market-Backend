// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Customer {
  id                    String        @id @default(uuid())
  googleId              String?       @unique
  email                 String        @unique
  firstName             String
  lastName              String
  password              String?
  dateOfBirth           DateTime?
  emailVerifiedAt       DateTime?
  emailVerificationCode String?
  passwordResetCode     String?
  refreshToken          String?
  displayImage          String?
  orders                Order[]
  addresses             Address[]
  cart                  CartProduct[]
  phoneNumbers          PhoneNumber[]
  ratings               Rating[]
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  role                  Role          @default(USER)

  @@index([email])
}

model Merchant {
  id                    String                 @id @default(uuid())
  googleId              String?                @unique
  email                 String                 @unique
  brandName             String                 @unique
  password              String?
  emailVerifiedAt       DateTime?
  emailVerificationCode String?
  passwordResetCode     String?
  displayImage          String?
  refreshToken          String?
  market                Market?                @relation(fields: [marketId], references: [id])
  merchantCategories    ProductCategory[]      @default([])
  addresses             Address[]
  phoneNumbers          PhoneNumber[]
  products              Product[]
  verification          MerchantVerification[]
  createdAt             DateTime               @default(now())
  updatedAt             DateTime               @updatedAt
  transactions          Transaction[]
  marketId              String?
  role                  Role                   @default(MERCHANT)

  referredById     String?
  referredBy       Marketer?          @relation(fields: [referredById], references: [id])
  referrerEarnings MarketerEarnings[]

  @@index([email, brandName])
}

model Marketer {
  id                String     @id @default(uuid())
  email             String     @unique
  referrerCode      String?    @unique
  referredMerchants Merchant[]
  firstName         String
  lastName          String
  username          String     @unique
  phoneNumber       String

  accountName   String
  accountBank   String
  accountNumber String

  BusinessType            String
  marketingExperience     String?
  IdentityCredentialType  String
  IdentityCredentialImage String

  earnings  MarketerEarnings[]
  verified  Boolean            @default(false)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

model MarketerEarnings {
  id         String   @id @default(uuid())
  marketer   Marketer @relation(fields: [marketerId], references: [id])
  merchant   Merchant @relation(fields: [merchantId], references: [id])
  amount     Float
  paid       Boolean  @default(false)
  marketerId String
  merchantId String
  AdId       String   @unique
  Ad         Ad       @relation(fields: [AdId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([marketerId])
  @@index([merchantId])
}

model Market {
  id           String     @id @default(uuid())
  name         String     @unique
  displayImage String?
  description  String?
  address      String
  city         String?
  state        String?
  isMall       Boolean    @default(false)
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  merchants    Merchant[]
}

model Product {
  id             String          @id @default(uuid())
  name           String
  details        String
  description    String
  price          Float
  prevPrice      Float?
  stock          Int
  displayImage   ProductImage?   @relation("DisplayImage", fields: [displayImageId], references: [id])
  images         ProductImage[]  @relation("ProductImages")
  ratings        Rating[]
  cart           CartProduct[]
  category       ProductCategory
  merchant       Merchant        @relation(fields: [merchantId], references: [id])
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  deletedAt      DateTime?
  merchantId     String
  displayImageId String?         @unique
  ads            Ad[]
  clicks         Int             @default(0)

  @@index([name])
}

model Ad {
  id        String    @id @default(uuid())
  level     Int
  paidFor   Boolean   @default(false)
  product   Product   @relation(fields: [productId], references: [id])
  productId String
  adViews   Int       @default(0)
  adClicks  Int       @default(0)
  expiresAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  MarketerEarnings MarketerEarnings?
}

model Order {
  id            String        @id @default(uuid())
  customer      Customer      @relation(fields: [customerId], references: [id])
  products      CartProduct[]
  status        OrderStatus
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  deletedAt     DateTime?
  productId     String?
  customerId    String
  transactionId String        @unique
}

model Transaction {
  id         String        @id @default(uuid())
  merchant   Merchant      @relation(fields: [merchantId], references: [id])
  amount     Float
  status     PaymentStatus
  for        PaymentFor
  reference  String
  date       DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  deletedAt  DateTime?
  merchantId String
}

model CartProduct {
  id         String    @id @default(uuid())
  customer   Customer  @relation(fields: [customerId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
  quantity   Int
  totalPrice Float
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  Order      Order?    @relation(fields: [orderId], references: [id])
  orderId    String?
  customerId String
  productId  String

  @@unique([productId, customerId])
}

model Address {
  id         String    @id @default(uuid())
  customer   Customer? @relation(fields: [customerId], references: [id])
  merchant   Merchant? @relation(fields: [merchantId], references: [id])
  name       String
  address    String
  city       String
  state      String
  country    String
  zipCode    String?
  postalCode String?
  isPrimary  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  customerId String?
  merchantId String?

  @@unique([name, customerId])
  @@unique([name, merchantId])
  @@index([name, customerId])
  @@index([name, merchantId])
}

model ProductImage {
  id             String    @id @default(uuid())
  product        Product?  @relation("ProductImages", fields: [productId], references: [id])
  productDisplay Product?  @relation("DisplayImage")
  url            String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  deletedAt      DateTime?
  productId      String?
}

model PhoneNumber {
  id         String    @id @default(uuid())
  customer   Customer? @relation(fields: [customerId], references: [id])
  merchant   Merchant? @relation(fields: [merchantId], references: [id])
  number     String
  isPrimary  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  customerId String?
  merchantId String?
}

model Rating {
  id         String    @id @default(uuid())
  customer   Customer  @relation(fields: [customerId], references: [id])
  product    Product   @relation(fields: [productId], references: [id])
  rating     Int
  review     String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  deletedAt  DateTime?
  customerId String
  productId  String

  @@index([productId])
}

model MerchantVerification {
  id         String                     @id @default(uuid())
  merchant   Merchant                   @relation(fields: [merchantId], references: [id])
  status     MerchantVerificationStatus
  type       MerchantVerificationType
  scope      MerchantVerificationScope
  document   String
  createdAt  DateTime                   @default(now())
  updatedAt  DateTime                   @updatedAt
  deletedAt  DateTime?
  merchantId String
}

enum MerchantVerificationStatus {
  PENDING
  APPROVED
  REJECTED
}

enum MerchantVerificationType {
  BUSINESS_REGISTRATION
  IDENTITY_VERIFICATION
}

enum MerchantVerificationScope {
  NIN
  CAC
  UTILITY_BILL
  PASSPORT
  DRIVERS_LICENSE
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum ProductCategory {
  EDUCATION_AND_STATIONERY
  REAL_ESTATE_AND_HOUSING
  EVENTS_AND_ENTERTAINMENT
  TECHNOLOGY_SERVICES
  CULTURAL_EXPERIENCES
  FOOD_AND_GROCERIES
  ELECTRONICS_AND_GADGETS
  FASHION_AND_ACCESSORIES
  HEALTH_AND_WELLNESS
  HOME_AND_LIVING
  AUTOMOBILE_NEEDS
  TRADITIONAL_CRAFTS
  SPORTS_AND_OUTDOOR
  KIDS_AND_BABY_PRODUCTS
}

enum PaymentFor {
  ADVERTISEMENT
}

enum PaymentStatus {
  SUCCESS
  FAILED
  INCOMPLETE
  INITIALIZED
  PENDING
}

enum Role {
  ADMIN
  EDITOR
  USER
  MARKETER
  MERCHANT
}
